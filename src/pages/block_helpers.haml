#intro
  %p
    块级 helpers 使用自定义的迭代器，其他的 helpers 都可以使用一个新的上下文来执行内部的代码块。

%h2#basic-blocks
  基础

.contents
  .bullet
    .description
      先定义一个简单的块级 helper，它只是简单的执行一下这块代码，就跟没有用这个helper一样。
    :html
      <div class="entry">
        <h1>{{title}}</h1>
        <div class="body">
          {{#noop}}{{body}}{{/noop}}
        </div>
      </div>
    .notes
      这个 <code>noop</code>  helper 接受一个 options 对象。
      这个对象有一个叫 (<code>options.fn</code>) 的方法，
      这个方法的用法就跟普通的编译过的 Hanldebars 模板的用法一样。
      所不同的就是，这个函数执行时会带有一个上下文，
      并且会返回一个字符串。
    :javascript
      Handlebars.registerHelper('noop', function(options) {
        return options.fn(this);
      });
    .notes
      Handlebars 在执行 helpers 的时候，总是会将
      <code>this</code> 指向当前的上下文，所以，你只需用
      <code>this</code> 来调用这一块代码，就可以在当前的上下文中求值了。

    .notes
      Any helpers defined in this manner will take precedence over fields defined in the context. To access a field that is masked by a helper, a path reference may be used. In the example above a field named <code>noop</code> on the context object would be referenced using:

    :html
      {{./noop}}

%h2#basic-blocks
  Basic Block Variation

.contents
  .bullet
    .description
      To better illustrate the syntax, let's define another block helper that adds some markup to the wrapped text.
    :html
      <div class="entry">
        <h1>{{title}}</h1>
        <div class="body">
          {{#bold}}{{body}}{{/bold}}
        </div>
      </div>
    .notes
      The <code>bold</code> helper will add markup to make its text bold.
      As before, the function will take a context as input and return a String.
    :javascript
      Handlebars.registerHelper('bold', function(options) {
        return new Handlebars.SafeString(
            '<div class="mybold">'
            + options.fn(this)
            + '</div>');
      });



%h2#with-helper
  <code>with</code> helper

.contents
  .bullet
    .description
      在上面介绍的 <code>noop</code> helper 的基础上，很容易的就能想到应该如何实现
      <code>with</code> helper 了。这里呢，
      不是用当前的上下文来执行代码块，我们可以使用任意的模板所传递进来的上下文。
    :html
      <div class="entry">
        <h1>{{title}}</h1>
        {{#with story}}
          <div class="intro">{{{intro}}}</div>
          <div class="body">{{{body}}}</div>
        {{/with}}
      </div>
    .notes
      在你使用的JSON嵌套非常深的时候，就会觉得这个helper 非常有帮助了，
      否则的话，每次都需要先写上很长的父级属性。比如上面的模板可以使用下面的这段JSON：
    :javascript
      {
        title: "First Post",
        story: {
          intro: "Before the jump",
          body: "After the jump"
        }
      }
    .notes
      实现这种helper，就跟实现一堆 <code>noop</code> helper 没什么区别。要注意的是，
      helpers 可以接受参数，并且对参数的求值就跟直接使用 <code>{{mustache}}</code>
      表达式一样一样地。
    :javascript
      Handlebars.registerHelper('with', function(context, options) {
        return options.fn(context);
      });
    .notes
      helpers 接受参数的顺序跟传递进来的顺序相同。

%h2#iterators
  Simple Iterators

.contents
  .bullet
    .description
      A common use-case for block helpers is using them to define
      custom iterators. In fact, all Handlebars built-in helpers are
      defined as regular Handlebars block helpers. Let's take a look
      at how the built-in <code>each</code> helper works.
    :html
      <div class="entry">
        <h1>{{title}}</h1>
        {{#with story}}
          <div class="intro">{{{intro}}}</div>
          <div class="body">{{{body}}}</div>
        {{/with}}
      </div>
      <div class="comments">
        {{#each comments}}
          <div class="comment">
            <h2>{{subject}}</h2>
            {{{body}}}
          </div>
        {{/each}}
      </div>
    .notes
      In this case, we want to invoke the block passed to <code>each</code>
      once for each element in the comments Array.
    :javascript
      Handlebars.registerHelper('each', function(context, options) {
        var ret = "";

        for(var i=0, j=context.length; i<j; i++) {
          ret = ret + options.fn(context[i]);
        }

        return ret;
      });
    .notes
      In this case, we iterate over the items in the passed parameter,
      invoking the block once with each item. As we iterate, we build
      up a String result, and then return it.

  .bullet
    .description
      This pattern can be used to implement more advanced iterators.
      For instance, let's create an iterator that creates a
      <code>&lt;ul&gt;</code> wrapper, and wraps each resulting element
      in an <code>&lt;li&gt;</code>.
    :html
      {{#list nav}}
        <a href="{{url}}">{{title}}</a>
      {{/list}}
    .notes
      You would evaluate this template using something like this as
      the context:
    :javascript
      {
        nav: [
          { url: "http://www.yehudakatz.com", title: "Katz Got Your Tongue" },
          { url: "http://www.sproutcore.com/block", title: "SproutCore Blog" },
        ]
      }
    .notes
      The helper is similar to the original <code>each</code> helper.
    :javascript
      Handlebars.registerHelper('list', function(context, options) {
        var ret = "<ul>";

        for(var i=0, j=context.length; i<j; i++) {
          ret = ret + "<li>" + options.fn(context[i]) + "</li>";
        }

        return ret + "</ul>";
      });
    .notes
      Using a library like underscore.js or SproutCore's runtime library
      could make this a bit prettier. For example, here's what it might
      look like using SproutCore's runtime library:
    :javascript
      Handlebars.registerHelper('list', function(context, options) {
        return "<ul>" + context.map(function(item) {
          return "<li>" + options.fn(item) + "</li>";
        }).join("\n") + "</ul>";
      });

%h2#conditionals
  Conditionals

.contents
  .bullet
    .description
      Another common use-case for block helpers is to evaluate conditional statements.
      As with the iterators, Handlebars' built-in <code>if</code> and
      <code>unless</code> control structures are implemented as regular
      Handlebars helpers.
    :html
      {{#if isActive}}
        <img src="star.gif" alt="Active">
      {{/if}}
    .notes
      Control structures typically do not change the current context, instead
      they decide whether or not to invoke the block based upon some variable.
    :javascript
      Handlebars.registerHelper('if', function(conditional, options) {
        if(conditional) {
          return options.fn(this);
        }
      });

  .bullet
    .description
      When writing a conditional, you will often want to make it possible
      for templates to provide a block of HTML that your helper should
      insert if the conditional evaluates to false. Handlebars handles
      this problem by providing generic <code>else</code> functionality
      to block helpers.
    :html
      {{#if isActive}}
        <img src="star.gif" alt="Active">
      {{else}}
        <img src="cry.gif" alt="Inactive">
      {{/if}}
    .notes
      Handlebars provides the block for the <code>else</code> fragment
      as <code>options.inverse</code>. You do not need to check for the
      existence of the <code>else</code> fragment: Handlebars will detect
      it automatically and register a "noop" function.
    :javascript
      Handlebars.registerHelper('if', function(conditional, options) {
        if(conditional) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      });
    .notes
      Handlebars provides additional metadata to block helpers by attaching
      them as properties of the options hash. Keep reading for more
      examples.

  .bullet
    .description
      Conditionals may also be chained by including the subsequent helper call
      within the else mustache.

    :html
      {{#if isActive}}
        <img src="star.gif" alt="Active">
      {{else if isInactive}}
        <img src="cry.gif" alt="Inactive">
      {{/if}}

    .notes
      It is not necessary to use the same helper in subsequent calls, the
      <code>unless</code> helper could be used in the else portion as with any
      other helper. When the helper values are different, the closing mustache
      should match the opening helper name.


%h2#hash-arguments
  Hash Arguments

.contents
  .bullet
    .description
      Like regular helpers, block helpers can accept an optional Hash
      as its final argument. Let's revisit the <code>list</code> helper
      and make it possible for us to add any number of optional attributes
      to the <code>&lt;ul&gt;</code> element we will create.
    :html
      {{#list nav id="nav-bar" class="top"}}
        <a href="{{url}}">{{title}}</a>
      {{/list}}
    .notes
      Handlebars provides the final hash as <code>options.hash</code>. This
      makes it easier to accept a variable number of parameters, while
      also accepting an optional Hash. If the template provides no hash
      arguments, Handlebars will automatically pass an empty object
      (<code>{}</code>), so you don't need to check for the existence of
      hash arguments.
    :javascript
      Handlebars.registerHelper('list', function(context, options) {
        var attrs = Em.keys(options.hash).map(function(key) {
          return key + '="' + options.hash[key] + '"';
        }).join(" ");

        return "<ul " + attrs + ">" + context.map(function(item) {
          return "<li>" + options.fn(item) + "</li>";
        }).join("\n") + "</ul>";
      });
    .notes
      Hash arguments provide a powerful way to offer a number of optional
      parameters to a block helper without the complexity caused by
      positional arguments.

.contents
  .bullet
    .description
      %p
        Block helpers can also inject private variables into their child
        templates. This can be useful to add extra information that is
        not in the original context data.
      %p
        For example, when iterating over a list, you may provide the
        current index as a private variable.
    :html
      {{#list array}}
        {{@index}}. {{title}}
      {{/list}}
    :javascript
      Handlebars.registerHelper('list', function(context, options) {
        var out = "<ul>", data;

        if (options.data) {
          data = Handlebars.createFrame(options.data);
        }

        for (var i=0; i<context.length; i++) {
          if (data) {
            data.index = i;
          }

          out += "<li>" + options.fn(context[i], { data: data }) + "</li>";
        }

        out += "</ul>";
        return out;
      });
    .notes
      Private variables provided via the <code>data</code> option are
      available in all descendent scopes.
    .notes
      Private variables defined in parent scopes may be accessed via pathed queries.
      To access the <code>index</code> field of the parent iterator, <code>@../index</code>
      may be used.
    .notes
      Make sure you create a new data frame in each helper that assigns its own data.
      Otherwise, downstream helpers might unexpectedly mutate upstream variables.
    .notes
      Also ensure that the <code>data</code> field is defined prior to attempting to
      interact with an existing data object. The private variable behavior is condtionally
      compiled and some templates might not create this field.


%h2#block-params
  Block Parameters

.contents
  .bullet
    .description
      New in Handlebars 3.0, it's possible to receive named parameters from supporting helpers.

    :html
      {{#each users as |user userId|}}
        Id: {{userId}} Name: {{user.name}}
      {{/each}}

    .notes
      In this particular example, <code>user</code> will have the same value as the current context and <code>userId</code> will have the index value for the iteration.

    .notes
      This allows for nested helpers to avoid name conflicts that can occur with private variables.

    :html
      {{#each users as |user userId|}}
        {{#each user.book as |book bookId|}}
          User Id: {{userId}} Book Id: {{bookId}}
        {{/each}}
      {{/each}}

  .bullet
    .description
      A number of <a href="builtin_helpers.html">builtin helpers</a> support block parameters and any custom helper may provide them through the <code>blockParams</code> options field.

    :javascript
      Handlebars.registerHelper('block-params', function() {
        var args = [],
            options = arguments[arguments.length - 1];
        for (var i = 0; i < arguments.length - 1; i++) {
          args.push(arguments[i]);
        }

        return options.fn(this, {data: options.data, blockParams: args});
      });
    :html
      {{#block-params 1 2 3 as |foo bar baz|}}
        {{foo}} {{bar}} {{baz}}
      {{/block-params}}

    .notes
      Implements a helper that allows for named variable declarations within a given block. This example would output <code>1 2 3</code> on render.

    .notes
      Helpers can determine the number of block paramemters referenced by the template via the <code>options.fn.blockParams</code> field, which is an integer count. This value represents the number of block parameters that could be referenced by the child template. Parameters beyond this cound will never be referenced and can safely be omitted by the helper if desired. This is optional and any additional parameters passed to the template will be silently ignored.

%h2#raw-blocks
  Raw Blocks

.contents
  .bullet
    .description
      Raw blocks are available for templates needing to handle unprocessed mustache blocks.

      :html
        {{{{raw-helper}}}}
          {{bar}}
        {{{{/raw-helper}}}}

      .notes
        will execute the helper <code>raw-helper</code> without interpretting the content.

      :javascript
        Handlebars.registerHelper('raw-helper', function(options) {
          return options.fn();
        });

      .notes
        will render

      :html
        {{bar}}
